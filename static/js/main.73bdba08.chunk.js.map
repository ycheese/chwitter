{"version":3,"sources":["fbase.js","routes/AuthForm.js","routes/Auth.js","components/Chweet.js","components/ChweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","error","setError","newAccount","setNewAccount","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Chweet","chweetObj","isOwner","editing","setEditing","text","newChweet","setNewChweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","autoFocus","src","width","height","faTrash","faPencilAlt","ChweetFactory","userObj","chweet","setChweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","chweets","setChweets","useEffect","onSnapshot","snapShot","newArray","docs","map","document","data","marginTop","Profile","refreshUser","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","margin","exact","path","from","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.73bdba08.chunk.js","sourcesContent":["// ** fbase.js를 수정하면 파이어베이스 설정이 제대로 적용되기 위해서 리액트 서버를 재시작해야 함 **\r\nimport firebase from \"firebase/compat/app\";\r\nimport \"firebase/compat/auth\";\r\nimport \"firebase/compat/firestore\";\r\nimport \"firebase/compat/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_ID\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import {authService} from \"fbase\";\r\nimport { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n    const[email, setEmail] = useState(\"\");\r\n    const[password, setPassword] = useState(\"\");\r\n    const[error, setError] = useState(\"\");\r\n\r\n    const[newAccount, setNewAccount] = useState(true);\r\n\r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target : {name, value},\r\n        } = event;\r\n        if(name === \"email\"){\r\n            setEmail(value);\r\n        } else if(name === \"password\"){\r\n            setPassword(value);\r\n        }\r\n    };\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try{\r\n            let data;\r\n            if(newAccount){\r\n                // create newAccount\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n            }else{\r\n                // login\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n        }catch(error){\r\n            setError(error.message);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <form onSubmit={onSubmit} className=\"container\">\r\n            <input name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange={onChange} className=\"authInput\"/>\r\n            <input name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange} className=\"authInput\"/>\r\n            <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} className=\"authInput authSubmit\"/>\r\n            {error && <span className=\"authError\">{error}</span>}\r\n        </form>\r\n        <span onClick={toggleAccount} className=\"authSwitch\">\r\n            {newAccount ? \"Sign In\" : \"Create Account\"}\r\n        </span>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AuthForm;","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faTwitter,\r\n    faGoogle,\r\n    faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport {authService, firebaseInstance } from \"fbase\";\r\nimport AuthForm from \"./AuthForm\";\r\n\r\nconst Auth = () => {\r\n\r\n    const onSocialClick = async (event) => {\r\n        const{\r\n            target: {name},\r\n        } = event;\r\n        let provider;\r\n        if(name === \"google\"){\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        }else if(name === \"github\"){\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        const data = await authService.signInWithPopup(provider);\r\n    };\r\n\r\n    return(\r\n        <div className=\"authContainer\">\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"3x\" style={{marginBottom:30}}/>\r\n            <AuthForm/>\r\n            <div className=\"authBtns\">\r\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">Continue with Google <FontAwesomeIcon icon={faGoogle}/></button>\r\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">Continue with Github <FontAwesomeIcon icon={faGithub}/></button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Auth;","import { dbService, storageService } from \"fbase\";\r\nimport { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Chweet = ({ chweetObj, isOwner }) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const [newChweet, setNewChweet] = useState(chweetObj.text);\r\n\r\n    // 삭제\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"삭제하시겠습니까?\");\r\n\r\n        if(ok){\r\n            await dbService.doc(`chweets/${chweetObj.id}`).delete();\r\n\r\n            if(chweetObj.attachmentUrl !== \"\"){\r\n                await storageService.refFromURL(chweetObj.attachmentUrl).delete();\r\n            }\r\n        }\r\n    };\r\n\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target : {value},\r\n        } = event;\r\n        setNewChweet(value);\r\n    };\r\n\r\n    // 수정\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        await dbService.doc(`chweets/${chweetObj.id}`).update({text : newChweet});\r\n        setEditing(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"chweet\">\r\n            {editing ? (\r\n                <>\r\n                    <form onSubmit={onSubmit} className=\"container chweetEdit\">\r\n                        <input onChange={onChange} value={newChweet} required placeholder=\"Edit your chweet\" autoFocus className=\"formInput\"/>\r\n                        <input type=\"submit\" value=\"Update Chweet\" className=\"formBtn\"/>\r\n                    </form>\r\n                    <button onClick={toggleEditing} className=\"formBtn cancelBtn\">Cancel</button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <h4>{chweetObj.text}</h4>\r\n                    {chweetObj.attachmentUrl && (\r\n                        <img src={chweetObj.attachmentUrl} width=\"50px\" height=\"50px\"/>\r\n                    )}\r\n                    {isOwner && (\r\n                        <div className=\"chweet__actions\">\r\n                            <span onClick={onDeleteClick}><FontAwesomeIcon icon={faTrash}/></span>\r\n                            <span onClick={toggleEditing}><FontAwesomeIcon icon={faPencilAlt}/></span>\r\n                        </div>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chweet;","import { dbService, storageService } from \"fbase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ChweetFactory = ({userObj}) => {\r\n    const [chweet, setChweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // 빈 입력일 경우 저장하지 않음\r\n        if(chweet === \"\"){\r\n            return;\r\n        }\r\n        \r\n        let attachmentUrl = \"\";\r\n        if(attachment !== \"\"){  // 사진 파일 유무와 상관없이 레퍼런스를 생성하는 문제 방지\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        \r\n        await dbService.collection(\"chweets\").add({\r\n            text : chweet,\r\n            createdAt : Date.now(),\r\n            creatorId : userObj.uid,\r\n            attachmentUrl,\r\n        });\r\n        setChweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            target : {value},\r\n        } =  event;\r\n        setChweet(value);\r\n    };\r\n\r\n    const onFileChange = (event) => {\r\n        const {\r\n            target : {files},\r\n        } = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const{\r\n                currentTarget : {result},\r\n            } = finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n            <div className=\"factoryInput__container\">\r\n                <input className=\"factoryInput__input\" value={chweet} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" maxLength={120}/>\r\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\"/>\r\n            </div>\r\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n                <span>Add photos</span>\r\n                <FontAwesomeIcon icon={faPlus}/>\r\n            </label>\r\n            <input id=\"attach-file\" type=\"file\" accept=\"image/*\" onChange={onFileChange} style={{opacity:0,}}/>\r\n            {attachment && (\r\n                <div className=\"factoryForm__attachment\">\r\n                    <img src={attachment} style={{backgroundImage:attachment,}}/>\r\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n                        <span>Remove</span>\r\n                        <FontAwesomeIcon icon={faTimes}/>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChweetFactory;","import { dbService } from \"fbase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Chweet from \"components/Chweet\";\r\nimport ChweetFactory from \"components/ChweetFactory\";\r\n\r\nconst Home = ({userObj}) => {\r\n    const [chweets, setChweets] = useState([]); // 파이어스토어에서 받은 데이터는 상태로 관리해야 화면에 보여줄 수 있음\r\n\r\n    // 실시간 데이터베이스 도입 위해 주석 처리\r\n    // get() 함수는 처음에 화면을 렌더링 할 때만 실행되므로 트윗을 작성할 때 마다 새로고침을 해줘야 함.\r\n    // const getChweets = async () => {\r\n    //     const dbChweets = await dbService.collection(\"chweets\").get();\r\n    //     dbChweets.forEach((document) => {\r\n    //         const chweetObject = {...document.data(), id:document.id};\r\n    //         //setChweets((prev) => [document.data(), ...prev])\r\n    //         setChweets((prev) => [chweetObject, ...prev])\r\n    //     });\r\n    // };\r\n\r\n    useEffect(() => {\r\n        //getChweets();\r\n        // get() 대신 onSnapshot() 함수를 써서 실시간 데이터베이스 도입 완료\r\n        dbService.collection(\"chweets\").onSnapshot((snapShot) => {\r\n            const newArray = snapShot.docs.map((document) => ({\r\n                id : document.id,\r\n                ...document.data(),\r\n            }));\r\n            setChweets(newArray);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <ChweetFactory userObj={userObj}/>\r\n            <div style={{marginTop:30}}>\r\n                {chweets.map((chweet) => (\r\n                    <Chweet key={chweet.id} chweetObj={chweet} isOwner={chweet.creatorId === userObj.uid}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import { authService } from \"fbase\";\r\nimport { useEffect, useState } from \"react\";\r\n//import Chweet from \"components/Chweet\";\r\n//import { useHistory } from \"react-router-dom\";\r\n\r\nconst Profile = ({userObj, refreshUser}) => {\r\n    //const history = useHistory();\r\n\r\n    //const [chweets, setChweets] = useState([]);\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    \r\n    const onLogoutClick = () => {\r\n        authService.signOut();\r\n        //history.push(\"/\");\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target : {value},\r\n        } = event;\r\n        setNewDisplayName(value);\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if(userObj.displayName !== newDisplayName){\r\n            await userObj.updateProfile({displayName : newDisplayName});\r\n            refreshUser();  // props로 받은 refreshUser()를 호출해서 userObj 새로고침 => 리렌더링\r\n        }\r\n    };\r\n\r\n    // 내 트윗만 보이기\r\n    /*\r\n    const getMyChweets = async () => {\r\n        const dbChweets = await dbService\r\n            .collection(\"chweets\")\r\n            .where(\"creatorId\", \"==\", userObj.uid)  // 조건\r\n            .orderBy(\"createdAt\", \"asc\")            // 정렬 => 파이어스토어에서 index 작업돼야함\r\n            .get();\r\n        \r\n        dbChweets.forEach((document) => {\r\n            const chweetObject = {...document.data(), id:document.id};\r\n            setChweets((prev) => [chweetObject, ...prev])\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getMyChweets();\r\n    }, []);\r\n    */\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n                <input onChange={onChange} type=\"text\" placeholder=\"Display name\" value={newDisplayName} autoFocus className=\"formInput\"/>\r\n                <input type=\"submit\" value=\"Update Profile\" className=\"formBtn\" style={{marginTop:10,}}/>\r\n            </form>\r\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogoutClick}>Log Out</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nconst Navigation = ({userObj}) => {\r\n    return (\r\n        <nav>\r\n            <ul style={{display:\"flex\", justifyContent:\"center\", marginTop:50}}>\r\n                <li>\r\n                    <Link to=\"/\" style={{marginRight:10}}><FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\"/></Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/profile\" style={{\r\n                        marginLeft:10,\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        alignItems: \"center\",\r\n                        fontSize: 12,\r\n                    }}>\r\n                        <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\"/>\r\n                        <span style={{marginTop:10}}>\r\n                            {userObj.displayName\r\n                            ? `${userObj.displayName}의 Profile`\r\n                            : \"Profile\"}\r\n                        </span>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navigation;","import {HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj}/>}\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                    <div\r\n                        style={{\r\n                            maxWidth: 890,\r\n                            width: \"100%\",\r\n                            margin: \"0 auto\",\r\n                            marginTop: 80,\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <Route exact path=\"/\">\r\n                            <Home userObj={userObj}/>\r\n                        </Route>\r\n                        <Route exact path=\"/profile\">\r\n                            <Profile refreshUser={refreshUser} userObj={userObj}/>\r\n                        </Route>\r\n                    </div>\r\n                ) : (\r\n                    <Route exact path=\"/\">\r\n                        <Auth/>\r\n                    </Route>\r\n                )}\r\n                <Redirect from=\"*\" to=\"/\"/>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import {useEffect, useState} from \"react\";\r\nimport AppRouter from \"components/Router\";\r\nimport {authService} from \"fbase\";\r\n\r\nfunction App(){\r\n  const [init, setInit] = useState(false);\r\n  const [userObj, setUserObj] = useState(null);\r\n  // useEffect : 특정한 시점에 실행되는 함수\r\n  // firebase로부터 인증 완료 후 실행됨\r\n  useEffect(() => {\r\n    authService.onAuthStateChanged((user) => {\r\n      if(user){\r\n        //setIsLoggedIn(user);\r\n        // state나 props의 내용물이 너무 많으면 변화를 인식하지 못함 => 리액트의 한계\r\n        // setUserObj({user}); 로 할 경우 userObj 내용이 너무 많다.\r\n        setUserObj({\r\n          uid : user.uid,\r\n          displayName : user.displayName,\r\n          updateProfile : (args) => user.updateProfile(args),\r\n        });\r\n      }else{\r\n        setUserObj(false);  // 유저 없는 경우 false로 초기화\r\n      }\r\n      setInit(true);\r\n    });\r\n  }, []);\r\n\r\n  // Profile 컴포넌트에서 사용자 이름을 변경하는 경우 리렌더링을 위한 props update\r\n  const refreshUser = () => {\r\n    //setUserObj(authService.currentUser);\r\n    const user = authService.currentUser;\r\n    setUserObj({\r\n      uid : user.uid,\r\n      displayName : user.displayName,\r\n      updateProfile : (args) => user.updateProfile(args),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {init ? (\r\n      <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj}/>\r\n       ) : (\r\n         \"initializing...\"\r\n       )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}