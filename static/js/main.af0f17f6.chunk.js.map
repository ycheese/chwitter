{"version":3,"sources":["fbase.js","routes/AuthForm.js","routes/Auth.js","components/Chweet.js","components/ChweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","error","setError","newAccount","setNewAccount","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Chweet","chweetObj","isOwner","editing","setEditing","text","newChweet","setNewChweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","src","width","height","ChweetFactory","userObj","chweet","setChweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","chweets","setChweets","useEffect","onSnapshot","snapShot","newArray","docs","map","document","data","Profile","refreshUser","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","Navigation","to","AppRouter","isLoggedIn","exact","path","from","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.af0f17f6.chunk.js","sourcesContent":["// ** fbase.js를 수정하면 파이어베이스 설정이 제대로 적용되기 위해서 리액트 서버를 재시작해야 함 **\r\nimport firebase from \"firebase/compat/app\";\r\nimport \"firebase/compat/auth\";\r\nimport \"firebase/compat/firestore\";\r\nimport \"firebase/compat/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_ID\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import {authService} from \"fbase\";\r\nimport { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n    const[email, setEmail] = useState(\"\");\r\n    const[password, setPassword] = useState(\"\");\r\n    const[error, setError] = useState(\"\");\r\n\r\n    const[newAccount, setNewAccount] = useState(true);\r\n\r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target : {name, value},\r\n        } = event;\r\n        if(name === \"email\"){\r\n            setEmail(value);\r\n        } else if(name === \"password\"){\r\n            setPassword(value);\r\n        }\r\n    };\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try{\r\n            let data;\r\n            if(newAccount){\r\n                // create newAccount\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n            }else{\r\n                // login\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n        }catch(error){\r\n            setError(error.message);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <form onSubmit={onSubmit}>\r\n            <input name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange={onChange}/>\r\n            <input name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange}/>\r\n            <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"}/>\r\n            {error}\r\n        </form>\r\n        <span onClick={toggleAccount}>\r\n            {newAccount ? \"Sign In\" : \"Create Account\"}\r\n        </span>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AuthForm;","import {authService, firebaseInstance } from \"fbase\";\r\nimport AuthForm from \"./AuthForm\";\r\n\r\nconst Auth = () => {\r\n\r\n    const onSocialClick = async (event) => {\r\n        const{\r\n            target: {name},\r\n        } = event;\r\n        let provider;\r\n        if(name === \"google\"){\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        }else if(name === \"github\"){\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        const data = await authService.signInWithPopup(provider);\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <AuthForm/>\r\n            <div>\r\n                <button onClick={onSocialClick} name=\"google\">Continue with Google</button>\r\n                <button onClick={onSocialClick} name=\"github\">Continue with Github</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Auth;","import { dbService, storageService } from \"fbase\";\r\nimport { useState } from \"react\";\r\n\r\nconst Chweet = ({ chweetObj, isOwner }) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const [newChweet, setNewChweet] = useState(chweetObj.text);\r\n\r\n    // 삭제\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"삭제하시겠습니까?\");\r\n\r\n        if(ok){\r\n            await dbService.doc(`chweets/${chweetObj.id}`).delete();\r\n\r\n            if(chweetObj.attachmentUrl !== \"\"){\r\n                await storageService.refFromURL(chweetObj.attachmentUrl).delete();\r\n            }\r\n        }\r\n    };\r\n\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target : {value},\r\n        } = event;\r\n        setNewChweet(value);\r\n    };\r\n\r\n    // 수정\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        await dbService.doc(`chweets/${chweetObj.id}`).update({text : newChweet});\r\n        setEditing(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {editing ? (\r\n                <>\r\n                    <form onSubmit={onSubmit}>\r\n                        <input onChange={onChange} value={newChweet} required/>\r\n                        <input type=\"submit\" value=\"Update Chweet\"/>\r\n                    </form>\r\n                    <button onClick={toggleEditing}>Cancel</button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <h4>{chweetObj.text}</h4>\r\n                    {chweetObj.attachmentUrl && (\r\n                        <img src={chweetObj.attachmentUrl} width=\"50px\" height=\"50px\"/>\r\n                    )}\r\n                    {isOwner && (\r\n                        <>\r\n                            <button onClick={onDeleteClick}>Delete Chweet</button>\r\n                            <button onClick={toggleEditing}>Edit Chweet</button>\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chweet;","import { dbService, storageService } from \"fbase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\nconst ChweetFactory = ({userObj}) => {\r\n    const [chweet, setChweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        \r\n        let attachmentUrl = \"\";\r\n        if(attachment !== \"\"){  // 사진 파일 유무와 상관없이 레퍼런스를 생성하는 문제 방지\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        \r\n        await dbService.collection(\"chweets\").add({\r\n            text : chweet,\r\n            createdAt : Date.now(),\r\n            creatorId : userObj.uid,\r\n            attachmentUrl,\r\n        });\r\n        setChweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            target : {value},\r\n        } =  event;\r\n        setChweet(value);\r\n    };\r\n\r\n    const onFileChange = (event) => {\r\n        const {\r\n            target : {files},\r\n        } = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const{\r\n                currentTarget : {result},\r\n            } = finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={onSubmit}>\r\n            <input value={chweet} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" maxLength={120}/>\r\n            <input type=\"file\" accept=\"image/*\" onChange={onFileChange}/>\r\n            <input type=\"submit\" value=\"Chweet\"/>\r\n            {attachment && (\r\n                <div>\r\n                    <img src={attachment} width=\"50px\" height=\"50px\"/>\r\n                    <button onClick={onClearAttachment}>Clear</button>\r\n                </div>\r\n            )}\r\n        </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChweetFactory;","import { dbService } from \"fbase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Chweet from \"components/Chweet\";\r\nimport ChweetFactory from \"components/ChweetFactory\";\r\n\r\nconst Home = ({userObj}) => {\r\n    const [chweets, setChweets] = useState([]); // 파이어스토어에서 받은 데이터는 상태로 관리해야 화면에 보여줄 수 있음\r\n\r\n    // 실시간 데이터베이스 도입 위해 주석 처리\r\n    // get() 함수는 처음에 화면을 렌더링 할 때만 실행되므로 트윗을 작성할 때 마다 새로고침을 해줘야 함.\r\n    // const getChweets = async () => {\r\n    //     const dbChweets = await dbService.collection(\"chweets\").get();\r\n    //     dbChweets.forEach((document) => {\r\n    //         const chweetObject = {...document.data(), id:document.id};\r\n    //         //setChweets((prev) => [document.data(), ...prev])\r\n    //         setChweets((prev) => [chweetObject, ...prev])\r\n    //     });\r\n    // };\r\n\r\n    useEffect(() => {\r\n        //getChweets();\r\n        // get() 대신 onSnapshot() 함수를 써서 실시간 데이터베이스 도입 완료\r\n        dbService.collection(\"chweets\").onSnapshot((snapShot) => {\r\n            const newArray = snapShot.docs.map((document) => ({\r\n                id : document.id,\r\n                ...document.data(),\r\n            }));\r\n            setChweets(newArray);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n        <ChweetFactory userObj={userObj}/>\r\n        <div>\r\n            {chweets.map((chweet) => (\r\n                <Chweet key={chweet.id} chweetObj={chweet} isOwner={chweet.creatorId === userObj.uid}/>\r\n            ))}\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Home;","import { authService } from \"fbase\";\r\nimport { useEffect, useState } from \"react\";\r\n//import Chweet from \"components/Chweet\";\r\n//import { useHistory } from \"react-router-dom\";\r\n\r\nconst Profile = ({userObj, refreshUser}) => {\r\n    //const history = useHistory();\r\n\r\n    //const [chweets, setChweets] = useState([]);\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    \r\n    const onLogoutClick = () => {\r\n        authService.signOut();\r\n        //history.push(\"/\");\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target : {value},\r\n        } = event;\r\n        setNewDisplayName(value);\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if(userObj.displayName !== newDisplayName){\r\n            await userObj.updateProfile({displayName : newDisplayName});\r\n            refreshUser();  // props로 받은 refreshUser()를 호출해서 userObj 새로고침 => 리렌더링\r\n        }\r\n    };\r\n\r\n    // 내 트윗만 보이기\r\n    /*\r\n    const getMyChweets = async () => {\r\n        const dbChweets = await dbService\r\n            .collection(\"chweets\")\r\n            .where(\"creatorId\", \"==\", userObj.uid)  // 조건\r\n            .orderBy(\"createdAt\", \"asc\")            // 정렬 => 파이어스토어에서 index 작업돼야함\r\n            .get();\r\n        \r\n        dbChweets.forEach((document) => {\r\n            const chweetObject = {...document.data(), id:document.id};\r\n            setChweets((prev) => [chweetObject, ...prev])\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getMyChweets();\r\n    }, []);\r\n    */\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input onChange={onChange} type=\"text\" placeholder=\"Display name\" value={newDisplayName}/>\r\n                <input type=\"submit\" value=\"Update Profile\"/>\r\n            </form>\r\n            <button onClick={onLogoutClick}>Log Out</button>\r\n            <div>\r\n                {/* {chweets.map((chweet) => (\r\n                    <Chweet key={chweet.id} chweetObj={chweet} isOwner={chweet.creatorId === userObj.uid}/>\r\n                ))} */}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Profile;","import { Link } from \"react-router-dom\";\r\n\r\nconst Navigation = ({userObj}) => {\r\n    return (\r\n        <nav>\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/profile\">{userObj.displayName}의 Profile</Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navigation;","import {HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj}/>}\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                    <>\r\n                        <Route exact path=\"/\">\r\n                            <Home userObj={userObj}/>\r\n                        </Route>\r\n                        <Route exact path=\"/profile\">\r\n                            <Profile refreshUser={refreshUser} userObj={userObj}/>\r\n                        </Route>\r\n                    </>\r\n                ) : (\r\n                    <Route exact path=\"/\">\r\n                        <Auth/>\r\n                    </Route>\r\n                )}\r\n                <Redirect from=\"*\" to=\"/\"/>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import {useEffect, useState} from \"react\";\r\nimport AppRouter from \"components/Router\";\r\nimport {authService} from \"fbase\";\r\n\r\nfunction App(){\r\n  const [init, setInit] = useState(false);\r\n  const [userObj, setUserObj] = useState(null);\r\n  // useEffect : 특정한 시점에 실행되는 함수\r\n  // firebase로부터 인증 완료 후 실행됨\r\n  useEffect(() => {\r\n    authService.onAuthStateChanged((user) => {\r\n      if(user){\r\n        //setIsLoggedIn(user);\r\n        // state나 props의 내용물이 너무 많으면 변화를 인식하지 못함 => 리액트의 한계\r\n        // setUserObj({user}); 로 할 경우 userObj 내용이 너무 많다.\r\n        setUserObj({\r\n          uid : user.uid,\r\n          displayName : user.displayName,\r\n          updateProfile : (args) => user.updateProfile(args),\r\n        });\r\n      }else{\r\n        setUserObj(false);  // 유저 없는 경우 false로 초기화\r\n      }\r\n      setInit(true);\r\n    });\r\n  }, []);\r\n\r\n  // Profile 컴포넌트에서 사용자 이름을 변경하는 경우 리렌더링을 위한 props update\r\n  const refreshUser = () => {\r\n    //setUserObj(authService.currentUser);\r\n    const user = authService.currentUser;\r\n    setUserObj({\r\n      uid : user.uid,\r\n      displayName : user.displayName,\r\n      updateProfile : (args) => user.updateProfile(args),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {init ? (\r\n      <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj}/>\r\n       ) : (\r\n         \"initializing...\"\r\n       )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}